#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define ROUTES 5
#define MAX_SEATS 30
int age;
 int graph[ROUTES][ROUTES] = {
        {0, 1400, 2200, 1500, 2400},
        {1400, 0, 1300, 2000, 1000},
        {2200, 1300, 0, 1700, 350},
        {1500, 2000, 1700, 0, 1900},
        {2400, 1000, 350, 1900, 0}
    };

    int availabilityG[ROUTES][ROUTES] = {
        {0, 10, 15, 10, 5},
        {10, 0, 20, 5, 10},
        {15, 20, 0, 25, 30},
        {10, 5, 25, 0, 15},
        {5, 10, 30, 15, 0}
    };

    int availabilityP[ROUTES][ROUTES] = {
        {0, 20, 34, 10, 6},
        {24, 0, 20, 17, 23},
        {13, 10, 0, 25, 30},
        {10, 19, 25, 0, 35},
        {25, 16, 20, 15, 0}
    };
int origin, destination, seatsToBook, bustype, ans;
double Gfare, Pfare, travel_time;
int ch;
char id[50], n[20], bankname[50], ac[20], name[20], date[10];
char *cities[ROUTES] = {
    "Delhi", "Mumbai", "Chennai", "Kolkata", "Bangalore"
};
int graph[ROUTES][ROUTES], availabilityG[ROUTES][ROUTES],  availabilityP[ROUTES][ROUTES];
 char *cities[ROUTES];
void pay(int ans){
    if (ans == 0) {
            exit(0);
        }
        if (ans == 1) {
            printf("\n1. Credit/Debit card\t2. UPI\t3. Net Banking\nEnter your payment method: ");
            scanf("%d", &ch);
            switch (ch) {
                case 1:
                    printf("Enter the name: ");
                    scanf("%s", name);
                       label:
                    printf("Enter 6 digit credit card number: \n");
                    scanf("%s", n);
                    if (strlen(n) == 6) {
                        printf("Payment Successful\n");
                        printf("Your ticket from %s to %s on %s has been booked under the name: %s\n",
                               cities[origin], cities[destination], date, name);
                    } else {
                        printf("Invalid credit card number\n");
                        goto    label;
                    }
                    break;
                case 2:
                    printf("Enter the name: ");
                    scanf("%s", name);
                    labe: printf("Enter a valid UPI ID (e.g., user@upi): ");
                    scanf("%s", id);
                    if (strchr(id, '@') != NULL) {
                        printf("Payment Successful\n");
                        printf("Your ticket from %s to %s on %s has been booked under the name: %s\n",
                               cities[origin], cities[destination], date, name);
                    } else {
                        printf("Please enter a valid UPI ID\n");
                        goto labe;
                    }
                    break;
                case 3:
                    printf("Enter the name: ");
                    scanf("%s", name);
                       lab:
                    printf("Enter your Bank name (SBI,HDFC) : ");
                    scanf("%s", bankname);
                    if (strcmp(bankname, "SBI") == 0 || strcmp(bankname, "sbi") == 0 ||
                        strcmp(bankname, "HDFC") == 0 || strcmp(bankname, "hdfc") == 0) {
                        printf("Enter account number: ");
                        scanf("%s", ac);
                        printf("Payment Successful\n");
                        printf("Your ticket from %s to %s on %s has been booked under the name: %s\n",
                               cities[origin], cities[destination], date, name);
                    } else {
                        printf("Bank not supported. Payment failed.\n");
                        goto    lab;
                    }
                    break;
                default:
                    printf("Invalid payment method\n");
                    exit(0);
            }
        }
}
void gpay(int seatstobook)
{
    if (seatsToBook > availabilityG[origin][destination]) {
        printf("\nSorry, only %d seats are available. You can book a maximum of %d seats.\n",
               availabilityG[origin][destination], availabilityG[origin][destination]);
        return;
    }
    availabilityG[origin][destination] -= seatsToBook;
    double GtotalFare = Gfare * seatsToBook;
    printf("\n%d seats from %s to %s. Total fare: Rs. %.2f\nProceed to payment? 0-No\t\t1-Yes\n",
           seatsToBook, cities[origin], cities[destination], GtotalFare);
    scanf("%d", &ans);
    pay(ans);
    }
    void pgay(int seattobook)
    {
        if (seatsToBook > availabilityP[origin][destination]) {
            printf("\nSorry, only %d seats are available. You can book a maximum of %d seats.\n",
                   availabilityP[origin][destination], availabilityP[origin][destination]);
            return;
        }
        availabilityP[origin][destination] -= seatsToBook;
        double PtotalFare = Pfare * seatsToBook;
        printf("\n%d seats from %s to %s. Total fare: Rs. %.2f\nTravel Time: %.2f minutes\nProceed to payment? 0-No\t\t1-Yes\n",
               seatsToBook, cities[origin], cities[destination], PtotalFare, travel_time);
        scanf("%d", &ans);
        pay(ans);}
void bookTicket(int graph[ROUTES][ROUTES], int availabilityG[ROUTES][ROUTES], int availabilityP[ROUTES][ROUTES], char *cities[ROUTES]) {
   

    printf("\nEnter origin city (0 - Delhi, 1 - Mumbai, 2 - Chennai, 3 - Kolkata, 4 - Bangalore): ");
    scanf("%d", &origin);
    printf("\nEnter destination city (0 - Delhi, 1 - Mumbai, 2 - Chennai, 3 - Kolkata, 4 - Bangalore): ");
    scanf("%d", &destination);
    printf("\nEnter the date (DD/MM/YYYY): ");
    scanf("%s", date);

    if (graph[origin][destination] == 0) {
        printf("\nSorry, there is no direct bus route between %s and %s.\n", cities[origin], cities[destination]);
        return;
    }

    if (availabilityG[origin][destination] == 0 && availabilityP[origin][destination] == 0) {
        printf("\nSorry, there are no available seats on the bus from %s to %s.\n", cities[origin], cities[destination]);
        return;
    }
    printf("Enter your age\n");
    scanf("%d",&age);

    Pfare = graph[origin][destination] * 4;
    Gfare = graph[origin][destination] * 3;
    if(age>=60 || age<=10)
    { Pfare=Pfare *0.5;
      Gfare=Gfare *0.5;
    }
    travel_time = graph[origin][destination] * 1.2;
    
    printf("\nThe distance from %s to %s is %d km.\n", cities[origin], cities[destination], graph[origin][destination]);
    printf("\nEnter preferred Bus type: 0- Govt Bus\t\t1- Private Bus\n");
    scanf("%d", &bustype);
    switch(bustype){
        case 0:printf("The availability of seats in government bus is %d:",availabilityG[origin][destination]);
               printf("\nEnter the number of seats you want to book: ");
               scanf("%d", &seatsToBook);
               gpay(seatsToBook);
              break;
        case 1:printf("The availability of seats in public bus is %d:",availabilityP[origin][destination]);
               printf("\nEnter the number of seats you want to book: ");
               scanf("%d", &seatsToBook);
                pgay(seatsToBook);
                break;
    }
   
   
       
    }
 

int main() {
   int choice;
    while (1) {
        printf("\nBus Ticket Booking System\n1. Book a bus ticket\n2. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                bookTicket(graph, availabilityG, availabilityP, cities);
                break;
            case 2:
                printf("Exiting the system. Have a great day!\n");
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}
